<%- include('header_guest') %>
<div class="content">
    <h1>Reset Password</h1>
    
    <p>Please enter your new password. Make sure it meets all security requirements.</p>

    <form action="/reset-password" method="POST" class="password-reset-form">
        <input type="hidden" name="token" value="<%= locals.token || '' %>">
        
        <% if (locals.messages && locals.messages.length > 0) { %>
            <ul class="error-messages">
                <% for (let message of locals.messages) { %>
                    <li><%= message %></li>
                <% } %>
            </ul>
        <% } %>

        <div class="password-requirements">
            <h3>Password Requirements:</h3>
            <ul id="password-requirements-list">
                <li class="requirement" data-requirement="length">At least 8 characters long</li>
                <li class="requirement" data-requirement="uppercase">Contains uppercase letter (A-Z)</li>
                <li class="requirement" data-requirement="lowercase">Contains lowercase letter (a-z)</li>
                <li class="requirement" data-requirement="number">Contains at least one number (0-9)</li>
                <li class="requirement" data-requirement="special">Contains special character (!@#$%^&*)</li>
            </ul>
        </div>

        <div class="form-group">
            <label for="password">New Password:</label>
            <input type="password" name="password" id="password" required 
                   placeholder="Enter your new password">
            <div class="password-strength" id="password-strength">
                <div class="strength-meter">
                    <div class="strength-fill" id="strength-fill"></div>
                </div>
                <span class="strength-text" id="strength-text">Password strength</span>
            </div>
        </div>

        <div class="form-group">
            <label for="confirmPassword">Confirm New Password:</label>
            <input type="password" name="confirmPassword" id="confirmPassword" required 
                   placeholder="Confirm your new password">
            <div class="password-match" id="password-match" style="display: none;">
                <span class="match-text" id="match-text"></span>
            </div>
        </div>

        <div class="form-actions">
            <button type="submit" id="submit-button" disabled>Reset Password</button>
            <a href="/" class="cancel-link">Cancel</a>
        </div>
    </form>

    <div class="security-note">
        <h3>Security Tips:</h3>
        <ul>
            <li>Choose a password that you haven't used before</li>
            <li>Consider using a passphrase with multiple words</li>
            <li>Don't share your password with anyone</li>
            <li>Consider using a password manager</li>
        </ul>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const submitButton = document.getElementById('submit-button');
    const strengthFill = document.getElementById('strength-fill');
    const strengthText = document.getElementById('strength-text');
    const passwordMatch = document.getElementById('password-match');
    const matchText = document.getElementById('match-text');

    // Password strength checking
    function checkPasswordStrength(password) {
        const requirements = {
            length: password.length >= 8,
            uppercase: /[A-Z]/.test(password),
            lowercase: /[a-z]/.test(password),
            number: /[0-9]/.test(password),
            special: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)
        };

        // Update requirement indicators
        document.querySelectorAll('.requirement').forEach(req => {
            const reqType = req.dataset.requirement;
            if (requirements[reqType]) {
                req.classList.add('met');
                req.classList.remove('unmet');
            } else {
                req.classList.add('unmet');
                req.classList.remove('met');
            }
        });

        // Calculate strength
        const metCount = Object.values(requirements).filter(Boolean).length;
        const strengthPercentage = (metCount / 5) * 100;
        
        strengthFill.style.width = strengthPercentage + '%';
        
        if (strengthPercentage < 40) {
            strengthFill.className = 'strength-fill weak';
            strengthText.textContent = 'Weak';
        } else if (strengthPercentage < 80) {
            strengthFill.className = 'strength-fill medium';
            strengthText.textContent = 'Medium';
        } else {
            strengthFill.className = 'strength-fill strong';
            strengthText.textContent = 'Strong';
        }

        return Object.values(requirements).every(Boolean);
    }

    // Check password match
    function checkPasswordMatch() {
        const password = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        
        if (confirmPassword.length === 0) {
            passwordMatch.style.display = 'none';
            return false;
        }
        
        passwordMatch.style.display = 'block';
        
        if (password === confirmPassword) {
            matchText.textContent = '✓ Passwords match';
            matchText.className = 'match-text match';
            return true;
        } else {
            matchText.textContent = '✗ Passwords do not match';
            matchText.className = 'match-text no-match';
            return false;
        }
    }

    // Update submit button state
    function updateSubmitButton() {
        const isStrongPassword = checkPasswordStrength(passwordInput.value);
        const passwordsMatch = checkPasswordMatch();
        
        submitButton.disabled = !(isStrongPassword && passwordsMatch);
    }

    passwordInput.addEventListener('input', updateSubmitButton);
    confirmPasswordInput.addEventListener('input', updateSubmitButton);

    // Initial check
    updateSubmitButton();
});
</script>

<style>
.password-reset-form {
    max-width: 500px;
    margin: 0 auto;
}

.password-requirements {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 15px;
    margin-bottom: 20px;
}

.password-requirements h3 {
    margin-top: 0;
    color: #495057;
}

.password-requirements ul {
    margin-bottom: 0;
    padding-left: 20px;
}

.requirement {
    margin-bottom: 5px;
    font-size: 14px;
}

.requirement.met {
    color: #28a745;
}

.requirement.met::before {
    content: '✓ ';
    font-weight: bold;
}

.requirement.unmet {
    color: #dc3545;
}

.requirement.unmet::before {
    content: '✗ ';
    font-weight: bold;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
}

.form-group input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

.password-strength {
    margin-top: 5px;
}

.strength-meter {
    height: 8px;
    background: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 5px;
}

.strength-fill {
    height: 100%;
    transition: width 0.3s ease;
}

.strength-fill.weak {
    background: #dc3545;
}

.strength-fill.medium {
    background: #ffc107;
}

.strength-fill.strong {
    background: #28a745;
}

.strength-text {
    font-size: 12px;
    color: #6c757d;
}

.password-match {
    margin-top: 5px;
}

.match-text.match {
    color: #28a745;
    font-size: 12px;
}

.match-text.no-match {
    color: #dc3545;
    font-size: 12px;
}

.form-actions {
    margin-top: 30px;
    text-align: center;
}

.form-actions button {
    background: #28a745;
    color: white;
    border: none;
    padding: 12px 30px;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
    margin-right: 15px;
}

.form-actions button:enabled:hover {
    background: #218838;
}

.form-actions button:disabled {
    background: #6c757d;
    cursor: not-allowed;
}

.cancel-link {
    color: #6c757d;
    text-decoration: none;
    padding: 12px 30px;
}

.cancel-link:hover {
    text-decoration: underline;
}

.error-messages {
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
    padding: 15px;
    margin-bottom: 20px;
    list-style: none;
}

.error-messages li {
    color: #721c24;
    margin-bottom: 5px;
}

.security-note {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 15px;
    margin-top: 30px;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
}

.security-note h3 {
    margin-top: 0;
    color: #495057;
}

.security-note ul {
    margin-bottom: 0;
    padding-left: 20px;
}

.security-note li {
    font-size: 14px;
    color: #6c757d;
    margin-bottom: 5px;
}
</style>
